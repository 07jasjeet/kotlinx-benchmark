import java.nio.file.Files
import java.nio.file.Paths

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://dl.bintray.com/jetbrains/kotlin-native-dependencies" }
    }
    dependencies {
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:$bintray_plugin_version"
    }
}

plugins {
    id 'maven-publish'
    id 'java-gradle-plugin'
    id 'org.jetbrains.kotlin.jvm' version "1.3.20"
}

gradlePlugin {
    plugins {
        benchmarkPlugin {
            id = "org.jetbrains.gradle.benchmarks.plugin"
            implementationClass = "org.jetbrains.gradle.benchmarks.BenchmarksPlugin"
        }
    }
}

sourceSets {
    main {
        kotlin.srcDirs = ['main/src']
        java.srcDirs = ['main/src']
        resources.srcDirs = ['main/resources']
    }
    test {
        kotlin.srcDirs = ['test/src']
        java.srcDirs = ['test/src']
        resources.srcDirs = ['test/resources']
    }
}

dependencies {

    compile group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: kotlin_version
    compile group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk7', version: kotlin_version
    compile group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8', version: kotlin_version

    compile 'com.squareup:kotlinpoet:1.0.0'
    compile "org.openjdk.jmh:jmh-core:$jmhVersion"

    compile group: 'org.jetbrains.kotlin', name: 'kotlin-native-library-reader', version: kotlin_version, {
        exclude group: 'org.jetbrains.kotlin', module: 'kotlin-compiler'
    }

    compileOnly group: 'org.jetbrains.kotlin.multiplatform', name: 'org.jetbrains.kotlin.multiplatform.gradle.plugin', version: kotlin_version
    compileOnly group: 'com.moowork.node', name: 'com.moowork.node.gradle.plugin', version: '1.2.0'
    compileOnly "org.openjdk.jmh:jmh-generator-bytecode:$jmhVersion" // used in worker

    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    testImplementation gradleTestKit()
    testImplementation 'junit:junit:4.12'
    
/*
    // This is needed for test to get it on classpath and run
    runtime "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
    runtime "org.jetbrains.kotlin:kotlin-compiler-embeddable:$kotlin_version"
*/
}

repositories {
    mavenCentral()
    jcenter()
    gradlePluginPortal()
    maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
    maven { url 'https://dl.bintray.com/kotlin/kotlin-dev' }
}

// Load `local.properties` file, if it exists. You can put your bintrayUser and bintrayApiKey values there, that file is ignored by git
if (Files.exists(Paths.get("$project.rootDir/local.properties"))) {
    def localProperties = new Properties()
    localProperties.load(new FileInputStream("$project.rootDir/local.properties"))
    localProperties.each { prop -> project.ext.set(prop.key, prop.value) }
}

project.ext.bintrayUser = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : null
project.ext.bintrayApiKey = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : null

publishing {
    repositories {
        maven {
            name = 'build'
            url = "$rootProject.projectDir/../build/maven"
        }
        maven {
            name = 'bintray'
            def bintrayOrg = project.bintrayOrg
            def bintrayRepository = project.bintrayRepository
            def bintrayPackage = project.bintrayPackage
            url = "https://api.bintray.com/maven/$bintrayOrg/$bintrayRepository/$bintrayPackage/;publish=0"
            credentials {
                username = project.bintrayUser
                password = project.bintrayApiKey
            }
        }
    }
}

afterEvaluate {
    clean {
        publishing.repositories.all { repository ->
            if (repository.name == 'build') {
                delete += repository.url
            }
        }
    }

    task('publishToBuildRepository') { publish ->
        group = 'publishing'
        tasks.withType(PublishToMavenRepository) { task ->
            if (task.repository.name == 'build') {
                publish.dependsOn(task)
            }
        }
    }
}