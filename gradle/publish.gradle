import java.nio.file.Files
import java.nio.file.Paths

// Configures publishing of Maven artifacts to Bintray

apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

apply from: project.rootProject.file('gradle/pom.gradle')

// Load `local.properties` file, if it exists. You can put your bintrayUser and bintrayApiKey values there, that file is ignored by git
if (Files.exists(Paths.get("$project.rootDir/local.properties"))) {
    def localProperties = new Properties()
    localProperties.load(new FileInputStream("$project.rootDir/local.properties"))
    localProperties.each { prop -> project.ext.set(prop.key, prop.value) }
} 

// Create empty jar for sources classifier to satisfy maven requirements
task stubSources(type: Jar) {
    classifier = 'sources'
}

// Create empty jar for javadoc classifier to satisfy maven requirements
task stubJavadoc(type: Jar) {
    classifier = 'javadoc'
}

task emptyJar(type: Jar) {
}

publishing {
    repositories {
        maven {
            url = "https://${project.bintrayOrg}.bintray.com/${project.bintrayRepository}"
        }
    }

    // Process each publication we have in this project
    publications.all { 
        // apply changes to pom.xml files, see pom.gradle
        pom.withXml(configureMavenCentralMetadata)

        def type = it.name
        switch (type) {
            case 'kotlinMultiplatform':
                task sourcesJar(type: Jar) {
                    classifier 'sources'
                    from kotlin.sourceSets.commonMain.kotlin
                }

                it.artifactId = "$project.name-native"
                it.artifact emptyJar
                it.artifact stubJavadoc
                it.artifact sourcesJar
                break
            case 'metadata':
                it.artifactId = "$project.name"
                break
            case 'jvm':
            case 'js':
            case 'native':
                it.artifactId = "$project.name-$type"
                break
        }


        pom.withXml { pom ->
            def dependenciesNode = asNode().getAt("dependencies")[0]
            if (dependenciesNode == null) return
            dependenciesNode.dependency.each {
                it.artifactId.each { node ->
                    def artifactId = node.text()
                    if (!artifactId.startsWith("kotlinx-io") || !artifactId.endsWith("native")) return

                    switch (type) {
                        case 'metadata':
                            node.setValue("${artifactId[0..-8]}")
                            break
                        case 'jvm':
                        case 'js':
                            node.setValue("${artifactId[0..-8]}-$type")
                            break
                    }
                }
            }
        }
    }


    kotlin.targets.all { target ->
        def publication = publishing.publications.findByName(target.name)

        if (publication != null) {
            publication.artifact stubJavadoc

            if (target.platformType.name != 'native') {
                publication.setModuleDescriptorGenerator(null)
                tasks.matching { it.name == "generateMetadataFileFor${name.capitalize()}Publication" }.all {
                    onlyIf { false }
                }
            } else {
                publication.artifact emptyJar
            }
        }
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')

    pkg {
        userOrg = project.bintrayOrg
        repo = project.bintrayRepository
        name = project.bintrayPackage
        licenses = ['Apache-2.0']
        vcsUrl = vcs
        version {
            name = project.version
            vcsTag = project.version
            released = new Date()
        }
    }
}

// kludge for correct pom data
bintrayUpload.dependsOn publishToMavenLocal

// This is for easier debugging of bintray uploading problems
bintrayUpload.doFirst {
    publications = project.publishing.publications.findAll { !it.name.contains('-test') }.collect {
        logger.lifecycle("Uploading artifact '$it.groupId:$it.artifactId:$it.version' from publication '$it.name'")
        it.name
    }
}
