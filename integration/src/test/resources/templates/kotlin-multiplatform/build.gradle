import org.jetbrains.kotlin.konan.target.KonanTarget
import org.jetbrains.kotlin.konan.target.HostManager

kotlin {
    jvm {
        compilations.create('benchmark') { associateWith(compilations.main) }
    }
    js('jsIr', IR) { nodejs() }
    wasm('wasmJs') { d8() }

    if (HostManager.hostIsLinux) linuxX64('native')
    if (HostManager.hostIsMingw) mingwX64('native')
    if (HostManager.host == KonanTarget.MACOS_X64.INSTANCE) macosX64('native')
    if (HostManager.host == KonanTarget.MACOS_ARM64.INSTANCE) macosArm64('native')

    compilerOptions {
        languageVersion.set(org.jetbrains.kotlin.gradle.dsl.KotlinVersion.@Companion.fromVersion(project.ext.kotlin_language_version))
        apiVersion.set(org.jetbrains.kotlin.gradle.dsl.KotlinVersion.@Companion.fromVersion(project.ext.kotlin_api_version))
    }


    sourceSets {
        commonMain {
            dependencies {
                implementation("org.jetbrains.kotlinx:kotlinx-benchmark-runtime:0.5.0-SNAPSHOT")
            }
        }
        jvmMain {
        }
        jvmBenchmark {
            dependsOn(jvmMain)
        }
        jsIrMain {
        }
        wasmJsMain {
        }
        nativeMain {
        }
    }
}

benchmark {
    targets {
        register("jvm")
        register("jsIr")
        register("wasmJs")
        register("native")
    }
}
