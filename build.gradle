import java.nio.file.Files
import java.nio.file.Paths

subprojects {
    // Load `local.properties` file, if it exists. You can put your bintrayUser and bintrayApiKey values there, that file is ignored by git
    if (Files.exists(Paths.get("$project.rootDir/local.properties"))) {
        def localProperties = new Properties()
        localProperties.load(new FileInputStream("$project.rootDir/local.properties"))
        localProperties.each { prop -> project.ext.set(prop.key, prop.value) }
    }
}

project.ext.bintrayUser = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : null
project.ext.bintrayApiKey = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : null

task publishBintrayCreateVersion() {
    doFirst {
        def url = new URL("https://api.bintray.com/packages/${bintrayOrg}/${bintrayRepository}/${bintrayPackage}/versions")
        def now = new Date()
        def date = now.format("yyyy-MM-dd'T'HH:mm:ss'Z'", TimeZone.getTimeZone('UTC'))
        def versionJson = '{"name": "' + project.version + '", "desc": "", "released":"' + date + '"}'
        def user = project.bintrayUser
        if (user == null)
            throw new Exception("Cannot create version. User has not been specified. Provide project property with the name 'bintrayUser'")

        def apiKey = project.bintrayApiKey
        if (apiKey == null)
            throw new Exception("Cannot create version. API key has not been specified. Provide project property with the name 'bintrayApiKey'")

        def encodedAuthorization = new sun.misc.BASE64Encoder().encode((user + ":" + apiKey).getBytes());

        logger.lifecycle("Creating version ${project.version} for package ${bintrayPackage} in ${bintrayOrg}/${bintrayRepository} on bintrayâ€¦")
        logger.info("User: $user")
        logger.info("Sending: $versionJson")
        def connection = (HttpURLConnection) url.openConnection()
        connection.with {
            doOutput = true
            requestMethod = 'POST'
            setRequestProperty("Authorization", "Basic $encodedAuthorization");
            setRequestProperty("Content-Type", "application/json")
            outputStream.withWriter { writer ->
                writer << versionJson
            }
        }
        def code = connection.getResponseCode()
        if (code >= 400) {
            def br = new BufferedReader(new InputStreamReader(connection.getErrorStream()));
            def sb = new StringBuilder()
            String output
            while ((output = br.readLine()) != null) {
                sb.append(output)
            }
            throw new Exception("Cannot create version. HTTP response $code: ${sb.toString()}")
        }
    }
}

afterEvaluate {
    task('publishToBuildRepository') {
        group = 'publishing'
        dependsOn gradle.includedBuild('benchmarks.plugin').task(':publishToBuildRepository')
    }
}
